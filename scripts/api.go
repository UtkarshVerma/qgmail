package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"strings"
	"text/template"
)

var blacklist = []string{
	"users.drafts.create",
	"users.drafts.get",
	"users.drafts.list",
	"users.drafts.send",
	"users.drafts.update",
	"users.labels.create",
	"users.labels.update",
	"users.messages.batchDelete",
	"users.messages.batchModify",
	"users.drafts.delete",
	"users.history.list",
	"users.labels.delete",
	"users.labels.patch",
	"users.messages.delete",
	"users.messages.get",
	"users.messages.import",
	"users.messages.insert",
	"users.messages.list",
	"users.messages.modify",
	"users.messages.send",
	"users.settings.delegates.create",
	"users.settings.delegates.delete",
	"users.settings.filters.create",
	"users.settings.filters.delete",
	"users.settings.forwardingAddresses.create",
	"users.settings.forwardingAddresses.delete",
	"users.settings.sendAs.create",
	"users.settings.sendAs.delete",
	"users.settings.sendAs.patch",
	"users.settings.sendAs.patch",
	"users.settings.sendAs.smimeInfo.delete",
	"users.settings.sendAs.smimeInfo.insert",
	"users.settings.sendAs.smimeInfo.setDefault",
	"users.settings.sendAs.update",
	"users.settings.sendAs.verify",
	"users.settings.updateAutoForwarding",
	"users.settings.updateImap",
	"users.settings.updateLanguage",
	"users.settings.updatePop",
	"users.settings.updateVacation",
	"users.stop",
	"users.threads.delete",
	"users.threads.get",
	"users.threads.list",
	"users.threads.modify",
	"users.watch",
}

var cmdTemplate = template.Must(template.New("cmd").
	Funcs(template.FuncMap{"makeArgs": makeArgs}).
	Parse(`// Code generated by go generate; DO NOT EDIT.
package cmd

import (
	"fmt"
	"os"
	"encoding/json"

	"github.com/UtkarshVerma/qgmail/auth"
	"github.com/spf13/cobra"
)

var {{.ID}} = &cobra.Command{
	Use: "{{.Use}}",
	Short: "{{.Short}}",
	Long: "{{.Long}}",
	DisableFlagsInUseLine: true,
	Args: cobra.ExactValidArgs({{.ExactValidArgs}}),
	Run: func(cmd *cobra.Command, args []string) {
		if err := auth.ReadToken(tokenFile); err != nil {
			fmt.Println("Error: Authorization token not found. Please authorize qGmail using 'qgmail auth'.")
			os.Exit(1)
		}

		service, err := auth.NewGmailService()
		cobra.CheckErr(err)

		val, err := service.{{.Call}}({{makeArgs .ExactValidArgs}}).Do()
		cobra.CheckErr(err)

		jsonData, _ := json.Marshal(val)
		fmt.Println(string(jsonData))
	},
}

func init() {
	requestCmd.AddCommand({{.ID}})
}
`))

type (
	cmd struct {
		ID, Use, Short, Long string
		ExactValidArgs       int
		Call                 string
	}

	api struct {
		Resources map[string]resource `json:"resources"`
	}

	resource struct {
		Methods   map[string]method   `json:"methods"`
		Resources map[string]resource `json:"resources"`
	}

	method struct {
		Description    string               `json:"description"`
		ParameterOrder []string             `json:"parameterOrder"`
		Parameters     map[string]parameter `json:"parameters"`
		Scopes         []string             `json:"scopes"`
		ID             string               `json:"id"`
	}

	parameter struct {
		Required    bool   `json:"required"`
		Description string `json:"description"`
	}
)

func main() {
	resp, err := http.Get("https://gmail.googleapis.com/$discovery/rest?version=v1")
	if err != nil {
		log.Fatal(err)
	}
	byteValue, _ := ioutil.ReadAll(resp.Body)

	var api api
	json.Unmarshal(byteValue, &api)
	api.Resources["users"].walk()
}

func (resource resource) walk() {
	for _, v := range resource.Methods {
		id := strings.Replace(v.ID, "gmail.", "", 1)
		if !find(id, blacklist) {
			f, err := os.Create(fmt.Sprintf("cmd/%s.go", strings.Replace(v.ID, "gmail.", "", 1)))
			if err != nil {
				os.Exit(1)
			}

			cmdTemplate.Execute(f, v.parse())
			f.Close()

		}
	}

	for _, v := range resource.Resources {
		v.walk()
	}
}

func (method method) parse() cmd {
	id := strings.Replace(method.ID, "gmail.", "", 1)
	split := strings.Split(id, ".")
	varID := split[0]
	for i := 1; i < len(split); i++ {
		varID += strings.Title(split[i])
	}

	for i, v := range split {
		split[i] = strings.Title(v)
	}

	args := []string{}
	for _, v := range method.ParameterOrder {
		args = append(args, fmt.Sprintf("<%s>", v))
	}

	shortDesc := strings.ReplaceAll(method.Description, "\"", "`")

	longDesc := ""
	for _, v := range method.ParameterOrder {
		longDesc += strings.ReplaceAll(
			fmt.Sprintf("%s: %s\\n", v, method.Parameters[v].Description),
			"\"", "`",
		)
	}

	return cmd{
		ID:             varID,
		Use:            fmt.Sprintf("%s %s", id, strings.Join(args, " ")),
		Short:          shortDesc,
		Long:           longDesc,
		Call:           strings.Join(split, "."),
		ExactValidArgs: len(method.Parameters),
	}
}

func makeArgs(len int) string {
	args := []string{}
	for i := 0; i < len; i++ {
		args = append(args, fmt.Sprintf("args[%d]", i))
	}
	return strings.Join(args, ", ")
}

func find(elem string, arr []string) bool {
	for _, v := range arr {
		if elem == v {
			return true
		}
	}
	return false
}
